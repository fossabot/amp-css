#!/usr/bin/env node

var Emitter = require('events').EventEmitter,
  meow = require('n'),
  util = require('util'),
  path = require('path'),
  ampScss = require('../index'),
  stdout = require('stdout-stream'),
  stdin = require('get-stdin'),
  fs = require('fs');

/**
 * Initialize CLI
 */
var packageJsonFile = '../package.json';
var packageJson = JSON.parse(fs.readFileSync(packageJsonFile));

var cli = meow({
  pkg: packageJsonFile,
  version: packageJson.version,
  help: [
    'Usage:',
    'amp-scss [options] <input.scss>',
    '',
    'Example: Compile foobar.scss to foobar.css',
    'amp-scss foobar.scss > foobar.css',
    '',
    'Options',
    '  -o, --output               Output directory',
    '  -q, --quiet                Suppress log output except on error',
    '  -v, --version              Prints version info',
    '  --include-path             Path to look for imported files',
    '  --help                     Print usage info'
  ].join('\n')
}, {
  boolean: [
    'quiet'
  ],
  string: [
    'include-path',
    'output'
  ],
  alias: {
    q: 'quiet',
    o: 'output',
    v: 'version'
  },
  default: {
    'include-path': process.cwd(),
    quiet: false
  }
});

/**
 * Is a Directory
 *
 * @param {String} filePath
 * @returns {Boolean}
 * @api private
 */

function isDirectory(filePath) {
  var isDir = false;
  try {
    var absolutePath = path.resolve(filePath);
    isDir = fs.statSync(absolutePath).isDirectory();
  } catch (e) {
    isDir = e.code === 'ENOENT';
  }
  return isDir;
}

/**
 * Create emitter
 *
 * @api private
 */

function getEmitter() {
  var emitter = new Emitter();

  emitter.on('error', function(err) {
    console.error(err);
    process.exit(1);
  });

  emitter.on('warn', function(data) {
    if (!options.quiet) {
      console.warn(data);
    }
  });

  emitter.on('info', function(data) {
    if (!options.quiet) {
      console.info(data);
    }
  });

  emitter.on('log', stdout.write.bind(stdout));

  return emitter;
}

/**
 * Construct options
 *
 * @param {Array} args
 * @param {Object} options
 * @api private
 */

function getOptions(args, options) {
  options.src = args[0];

  if (args[1]) {
    options.dest = path.resolve(args[1]);
  } else if (options.output) {
    options.dest = path.join(
      path.resolve(options.output),
      [path.basename(options.src, path.extname(options.src)), '.css'].join(''));  // replace ext.
  }

  return options;
}

/**
 * Run
 *
 * @param {Object} options
 * @param {Object} emitter
 * @api private
 */

function run(options, emitter) {
  if (!Array.isArray(options.includePath)) {
    options.includePath = [options.includePath];
  }

  if (options.directory) {
    if (!options.output) {
      emitter.emit('error', 'An output directory must be specified when compiling a directory');
    }
    if (!isDirectory(options.output)) {
      emitter.emit('error', 'An output directory must be specified when compiling a directory');
    }
  }

  ampScss.process({
    inputFile: options.src,
    outputFile: options.dest,
    includePaths: options.includePath
  });
}

/**
 * Arguments and options
 */

var options = getOptions(cli.input, cli.flags);
var emitter = getEmitter();

/**
 * Show usage if no arguments are supplied
 */

if (!options.src && process.stdin.isTTY) {
  emitter.emit('error', [
    'Provide a Sass file to render',
    '',
    'Example: Compile foobar.scss to foobar.css',
    'node-sass foobar.scss > foobar.css'
  ].join('\n'));
}

/**
 * Apply arguments
 */

if (options.src) {
  if (isDirectory(options.src)) {
    emitter.emit('error', 'Input must not be a directory.');
    return;
  }
  run(options, emitter);
} else if (!process.stdin.isTTY) {
  stdin(function(data) {
    options.data = data;
    options.stdin = true;
    run(options, emitter);
  });
}
