#!/usr/bin/env node

var Emitter = require('events').EventEmitter,
    meow = require('meow'),
    util = require('util'),
    path = require('path'),
    ampScss = require('../index'),
    stdout = require('stdout-stream'),
    stdin = require('get-stdin'),
    fs = require('fs');

/**
 * Initialize CLI
 */
var packageJsonFile = path.join(__dirname, '..', 'package.json');
var packageJson = JSON.parse(fs.readFileSync(packageJsonFile));

var helpText = [
  'Usage:',
  'amp-scss compile [options] <input.scss>',
  '',
  'Example: Compile foobar.scss to foobar.css',
  'amp-scss compile foobar.scss > foobar.css',
  '',
  'Example: Insert CSS of foobar.css into AMP custom CSS area in index.html',
  'amp-scss assign foobar.css index.html',
  '',
  'Options',
  '  -o, --output               Output directory',
  '  -s, --sanitize             Remove !important',
  '  -q, --quiet                Suppress log output except on error',
  '  -v, --version              Prints version info',
  '  --include-path             Path to look for imported files',
  '  --help                     Print usage info'
].join('\n');
var cli = meow(helpText, {
  flags: {
    quiet: {
      type: 'boolean',
      alias: 'q',
      default: false
    },
    sanitize: {
      type: 'boolean',
      alias: 's',
      default: false
    },
    minify: {
      type: 'boolean',
      alias: 'm',
      default: true
    },
    output: {
      type: 'string',
      alias: 'o'
    },
    'include-path': {
      type: 'string',
      default: process.cwd()
    },
  }
});

/**
 * Is a Directory
 *
 * @param {String} filePath
 * @returns {Boolean}
 * @api private
 */

function isDirectory(filePath) {
  var isDir = false;
  try {
    var absolutePath = path.resolve(filePath);
    isDir = fs.statSync(absolutePath).isDirectory();
  } catch (e) {
    isDir = e.code === 'ENOENT';
  }
  return isDir;
}

/**
 * Create emitter
 *
 * @api private
 */

function getEmitter() {
  var emitter = new Emitter();

  emitter.on('error', function(err) {
    console.error(err);
    process.exit(1);
  });

  emitter.on('warn', function(data) {
    if (!options.quiet) {
      console.warn(data);
    }
  });

  emitter.on('info', function(data) {
    if (!options.quiet) {
      console.info(data);
    }
  });

  emitter.on('log', stdout.write.bind(stdout));

  return emitter;
}

/**
 * Construct options
 *
 * @param {Array} args
 * @param {Object} options
 * @api private
 */

function getOptions(args, options) {
  options.action = args[0];
  options.src = args[1];

  if (args[2]) {
    options.dest = path.resolve(args[2]);
  } else if (options.output) {
    options.dest = path.join(
        path.resolve(options.output),
        [path.basename(options.src, path.extname(options.src)), '.css'].join(''));  // replace ext.
  }

  return options;
}

/**
 * Arguments and options
 */
var options = getOptions(cli.input, cli.flags);
var emitter = getEmitter();

switch (options.action) {
  case 'process':
    if (!options.src) {
      emitter.emit('error', [
        'Provide a Sass file to render',
        '',
        'Example: Compile foobar.scss to foobar.css',
        'node-sass foobar.scss > foobar.css'
      ].join('\n'));
    }

    if (isDirectory(options.src)) {
      emitter.emit('error', 'Input must not be a directory.');
      return;
    }
    if (!Array.isArray(options.includePath)) {
      options.includePath = [options.includePath];
    }

    if (options.directory) {
      if (!options.output) {
        emitter.emit('error', 'An output directory must be specified when compiling a directory');
      }
      if (!isDirectory(options.output)) {
        emitter.emit('error', 'An output directory must be specified when compiling a directory');
      }
    }
    ampScss.process({
      file: options.src,
      includePaths: options.includePath,
      sanitize: options.sanitize,
      minify: options.minify
    }).then(function(css) {
      console.log(css);
    }).catch(function(error) {
      console.error('AMP validation failed:');
      console.error(error);
    });
    break;
  case 'assign':
    if (!options.src) {
      emitter.emit('error', [
        'Provide a CSS file',
        '',
        'Example: Insert CSS of foobar.css into AMP custom CSS area in index.html',
        'node-sass assign foobar.css index.html'
      ].join('\n'));
    }
    if (!options.dest) {
      emitter.emit('error', [
        'Provide a HTML file',
        '',
        'Example: Insert CSS of foobar.css into AMP custom CSS area in index.html',
        'node-sass assign foobar.css index.html'
      ].join('\n'));
    }
    ampScss.assign({
      cssFile: options.src,
      htmlFile: options.dest
    });
    break;
  default:
    // Help
    console.info(helpText);
    break;
}
